git_multimail.py is mostly a plug-in replacement for the old script
contrib/hooks/post-receive-mail.  This document describes the
differences and explains how to configure git_multimail.py to get
behavior closest to that of post-receive-email.

* Emails about changes to annotated tags do *not* include a summary of
  all the changes since the last annotated tag.  (post-receive-email
  sends such emails to subscribers of hooks.announcelist.)

* hooks.commitlist -- This is a new configuration variable.
  Recipients listed here will receive a separate email for each new
  commit.  However, if this variable is *not* set, it defaults to the
  value of hooks.mailinglist.  Therefore, if you *don't* want the
  members of hooks.mailinglist to receive one email per commit, then
  set this value to the empty string:

      git config hooks.commitlist ''

* hooks.emailprefix -- If this value is not set, then emails are
  prefixed with the short name of the repository enclosed in square
  brackets; e.g., "[myrepo]".  post-receive-email would set the prefix
  to "[SCM]" if this option was not set.  So if you were relying on
  the old default (for example, for email filtering), set this
  variable explicitly to the old value:

      git config hooks.emailprefix "[SCM]"

* The "hooks.showrev" configuration option is not supported.  Its main
  use is superseded by the one-email-per-commit feature.


Differences between post-receive-email and git_multimail.py.  For full
details, please refer to the main README file:

* One email per commit.  For each reference change, the script first
  outputs one email summarizing the reference change (including
  one-line summaries of the new commits), then it outputs a separate
  email for each new commit that was introduced, including patches.
  These one-email-per-commit emails go to the addresses listed in
  hooks.commitlist.  post-receive-mail sends only one email for each
  *reference* that is changed, no matter how many commits were added
  to the reference.

* Better algorithm for detecting new commits.  post-receive-mail
  processes one reference change at a time, which causes it to fail to
  describe new commits that were included in multiple branches.  For
  example, if a single push adds the "*" commits in the diagram below,
  then post-receive-mail would never include the details of the two
  commits that are common to "master" and "branch" in its
  notifications.

      o---o---o---*---*---*    <-- master
                       \
                        *---*  <-- branch

  git_multimail.py analyzes all reference modifications to determine
  which commits were not present before the change, therefore avoiding
  that error.

* The environment in which git is running can be configured via an
  "Environment" abstraction.

* Built-in support for Gitolite-managed repositories.

* Instead of using full SHA1 object names in emails, git_multimail.py
  mostly uses abbreviated SHA1s, plus one-line log message summaries
  where appropriate.

* In the schematic diagrams that explain non-fast-forward commits,
  git_multimail.py shows the names of the branches involved.

* The emails generated by git_multimail.py include the name of the git
  repository that was modified; this is convenient for recipients who
  are monitoring multiple repositories.

* git_multimail.py allows the email "From" addresses to be configured.

* By default, git_multimail.py sets email "Reply-To" headers to reply
  to the pusher (for reference updates) and to the author (for commit
  notifications).

* The generated emails contain a configurable footer.  By default, it
  lists the name of the administrator who should be contacted to
  unsubscribe from notification emails.

* Written in Python.  Easier to add new features.

