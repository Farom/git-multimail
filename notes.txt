Notes
=====

* Copyright notice: I kept the copyright notice of Andy Parkins, since
  the script is ultimately derived from his.  But I added my own
  copyright notice, since the script is mostly rewritten.


git-multimail-v2
================

* Are people happy with the convention of using configuration
  namespace "multimailhook.*", as opposed to something like
  "hook.multimail.*"?

* Test that setting email recipient lists to the empty string really
  disables the sending of those emails.

* Make it easier to skip sending refchange emails.

* Better configurability; add support and documentation for:

  * Changing template contents.

    * Document the variables that can be used in the templates.

  * Making other configuration changes without editing the script.

* Make sure that email texts (i.e., in templates) are appropriate even
  for people who are subscribed to only some of the lists.

* Patch formatting:

  * Make sure that the script does not barf on binary files that are
    improperly marked.

  * Make sure that script does not emit enormous emails for
    apparently-text files that have extremely long lines.

  * Perhaps add a hook to allow patches to be cleaned up somehow
    before being sent.

* Write a README file:

  * Document how to run the script both ways (as script or as Python
    import).

  * Document how to define a new Environment.

* Make sure that default values for envelopesender, From, Reply-To,
  etc. are OK.

* Support LDAP, for example:

  * Add an LDAP environment (?)

  * Add an example plugin for working with LDAP (?)

* More testing.


Ideas for the future
====================

* Make the templating system more flexible and easier to configure.

* Use textwrap to correctly wrap prose output in the notification emails.

* Each commit is threaded with one of the ReferenceChanges in the push
  that first introduced the commit.  The algorithm for grouping them
  could be made cleverer:

  * Distinguish between first and subsequent parents of merge commits.

  * Recognize specific git idioms (e.g., merging and deleting a
    feature branch) and describe them in more abstract terms in the
    commit emails.

* Perhaps handle specially the case when multiple new tags point at
  the same commit (e.g., describe them all in a single email rather
  than one email per tag).

* When a reference is created, show the branch(es) from which it
  appears to sprout.

* Perhaps add an option to send emails to an arbitrary SMTP server
  using Python's smtplib rather than by using /usr/sbin/sendmail.


Recipients list policy
======================

1. mailinglist, if it is set, is the default for all types of email.
   If it is not set, then the default for all types of email is not to
   generate them at all.

2. commitlist (or mailinglist) always gets emails about every new
   commit.

3. announcelist (or refchangelist or mailinglist) gets emails about
   changes to annotated tags.  If announceshortlog is true (default is
   false), then emails about annotated tags include a list of changes
   since the last tag.  Default is false.

4. refchangelist (or mailinglist) gets emails about changes to all
   other kinds of references.


